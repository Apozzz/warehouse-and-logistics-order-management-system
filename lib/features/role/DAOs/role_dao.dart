import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:inventory_system/features/permissions/models/role_permission_model.dart';
import 'package:inventory_system/features/role/models/role_model.dart';

class RoleDAO {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  Future<Role?> getRole(String roleId) async {
    try {
      final doc = await _db.collection('roles').doc(roleId).get();
      if (doc.exists) {
        return Role.fromMap(doc.data() as Map<String, dynamic>, doc.id);
      }
    } catch (e) {
      print('Error fetching role: $e');
      // Handle the error appropriately
    }
    return null; // Return null if the role doesn't exist or an error occurs
  }

  // Creates a new role
  Future<Role> createRole(String name, List<RolePermission> rolePermissions,
      String companyId) async {
    final role = Role(
      id: '', // ID will be generated by Firestore
      name: name,
      rolePermissions: rolePermissions,
      companyId: companyId,
    );
    final docRef = await _db.collection('roles').add(role.toMap());
    return role.copyWith(
        id: docRef.id); // Update the role with the generated ID
  }

  // Fetches roles by their IDs
  Future<List<Role>> getRolesByIds(List<String> roleIds) async {
    final roleDocs = await _db
        .collection('roles')
        .where(FieldPath.documentId, whereIn: roleIds)
        .get();
    return roleDocs.docs
        .map((doc) => Role.fromMap(doc.data() as Map<String, dynamic>, doc.id))
        .toList();
  }

  // Fetches roles by companyId
  Future<List<Role>> getRolesByCompanyId(String companyId) async {
    final roleDocs = await _db
        .collection('roles')
        .where('companyId', isEqualTo: companyId)
        .get();
    return roleDocs.docs
        .map((doc) => Role.fromMap(doc.data() as Map<String, dynamic>, doc.id))
        .toList();
  }

  // Updates a role
  Future<void> updateRole(Role updatedRole) async {
    await _db
        .collection('roles')
        .doc(updatedRole.id)
        .update(updatedRole.toMap());
  }

  // Deletes a role by ID
  Future<void> deleteRole(String roleId) async {
    await _db.collection('roles').doc(roleId).delete();
  }
}
